<?php

    class AProductDetail extends ProductDetail
    {
        /**
         * @return array validation rules for model attributes.
         */
        public function rules()
        {
            // NOTE: you should only define rules for those attributes that
            // will receive user inputs.
            return array(
                array('product_id, name, unsign_name, size, material, price', 'required'),
                array('product_id, language_id', 'numerical', 'integerOnly' => TRUE),
                array('name, unsign_name, size, material', 'length', 'max' => 255),
                array('price', 'length', 'max' => 15),
                array('last_update, description', 'safe'),
                // The following rule is used by search().
                // @todo Please remove those attributes that should not be searched.
                array('id, product_id, language_id, name, unsign_name, size, material, price, last_update, description', 'safe', 'on' => 'search'),
            );
        }

        /**
         * @return array relational rules.
         */
        public function relations()
        {
            // NOTE: you may need to adjust the relation name and the related
            // class name for the relations automatically generated below.
            return array();
        }

        /**
         * @return array customized attribute labels (name=>label)
         */
        public function attributeLabels()
        {
            return array(
                'id'          => Yii::t('adm/label', 'id'),
                'product_id'  => Yii::t('adm/label', 'product_id'),
                'language_id' => Yii::t('adm/label', 'language_id'),
                'name'        => Yii::t('adm/label', 'name'),
                'unsign_name' => Yii::t('adm/label', 'unsign_name'),
                'size'        => Yii::t('adm/label', 'size'),
                'material'    => Yii::t('adm/label', 'material'),
                'price'       => Yii::t('adm/label', 'price'),
                'last_update' => Yii::t('adm/label', 'last_update'),
                'description' => Yii::t('adm/label', 'description'),
            );
        }

        /**
         * Retrieves a list of models based on the current search/filter conditions.
         *
         * Typical usecase:
         * - Initialize the model fields with values from filter form.
         * - Execute this method to get CActiveDataProvider instance which will filter
         * models according to data in model fields.
         * - Pass data provider to CGridView, CListView or any similar widget.
         *
         * @return CActiveDataProvider the data provider that can return the models
         * based on the search/filter conditions.
         */
        public function search()
        {
            // @todo Please modify the following code to remove attributes that should not be searched.

            $criteria = new CDbCriteria;

            $criteria->compare('id', $this->id, TRUE);
            $criteria->compare('product_id', $this->product_id);
            $criteria->compare('language_id', $this->language_id);
            $criteria->compare('name', $this->name, TRUE);
            $criteria->compare('unsign_name', $this->unsign_name, TRUE);
            $criteria->compare('size', $this->size, TRUE);
            $criteria->compare('material', $this->material, TRUE);
            $criteria->compare('price', $this->price, TRUE);
            $criteria->compare('last_update', $this->last_update, TRUE);
            $criteria->compare('description', $this->description, TRUE);

            return new CActiveDataProvider($this, array(
                'criteria' => $criteria,
            ));
        }

        /**
         * Returns the static model of the specified AR class.
         * Please note that you should have this exact method in all your CActiveRecord descendants!
         *
         * @param string $className active record class name.
         *
         * @return AProductDetail the static model class
         */
        public static function model($className = __CLASS__)
        {
            return parent::model($className);
        }

        /**
         * @return bool
         */
        public function beforeSave()
        {
            $this->last_update = date('Y-m-d H:i:s', time());

            return TRUE;
        }

        /**
         * @return bool
         */
        public function beforeValidate()
        {
            if ($this->name != '') {
                $this->unsign_name = CFunction::unsign_string($this->name);
            }

            return parent::beforeValidate(); // TODO: Change the autogenerated stub
        }
    }
